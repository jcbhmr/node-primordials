import test from "node:test";
import assert from "node:assert";
import * as index from "../src/index.js";

// prettier-ignore
{
test("AggregateError", () => assert("AggregateError" in index));
test("AggregateErrorLength", () => assert("AggregateErrorLength" in index));
test("AggregateErrorName", () => assert("AggregateErrorName" in index));
test("AggregateErrorPrototype", () => assert("AggregateErrorPrototype" in index));
test("AggregateErrorPrototypeConstructor", () => assert("AggregateErrorPrototypeConstructor" in index));
test("AggregateErrorPrototypeMessage", () => assert("AggregateErrorPrototypeMessage" in index));
test("AggregateErrorPrototypeName", () => assert("AggregateErrorPrototypeName" in index));
test("Array", () => assert("Array" in index));
test("ArrayBuffer", () => assert("ArrayBuffer" in index));
test("ArrayBufferGetSymbolSpecies", () => assert("ArrayBufferGetSymbolSpecies" in index));
test("ArrayBufferIsView", () => assert("ArrayBufferIsView" in index));
test("ArrayBufferLength", () => assert("ArrayBufferLength" in index));
test("ArrayBufferName", () => assert("ArrayBufferName" in index));
test("ArrayBufferPrototype", () => assert("ArrayBufferPrototype" in index));
test("ArrayBufferPrototypeConstructor", () => assert("ArrayBufferPrototypeConstructor" in index));
test("ArrayBufferPrototypeGetByteLength", () => assert("ArrayBufferPrototypeGetByteLength" in index));
test("ArrayBufferPrototypeSlice", () => assert("ArrayBufferPrototypeSlice" in index));
test("ArrayBufferPrototypeSymbolToStringTag", () => assert("ArrayBufferPrototypeSymbolToStringTag" in index));
test("ArrayFrom", () => assert("ArrayFrom" in index));
test("ArrayGetSymbolSpecies", () => assert("ArrayGetSymbolSpecies" in index));
test("ArrayIsArray", () => assert("ArrayIsArray" in index));
test("ArrayIterator", () => assert("ArrayIterator" in index));
test("ArrayIteratorPrototype", () => assert("ArrayIteratorPrototype" in index));
test("ArrayIteratorPrototypeNext", () => assert("ArrayIteratorPrototypeNext" in index));
test("ArrayIteratorPrototypeSymbolToStringTag", () => assert("ArrayIteratorPrototypeSymbolToStringTag" in index));
test("ArrayLength", () => assert("ArrayLength" in index));
test("ArrayName", () => assert("ArrayName" in index));
test("ArrayOf", () => assert("ArrayOf" in index));
test("ArrayOfApply", () => assert("ArrayOfApply" in index));
test("ArrayPrototype", () => assert("ArrayPrototype" in index));
test("ArrayPrototypeAt", () => assert("ArrayPrototypeAt" in index));
test("ArrayPrototypeConcat", () => assert("ArrayPrototypeConcat" in index));
test("ArrayPrototypeConstructor", () => assert("ArrayPrototypeConstructor" in index));
test("ArrayPrototypeCopyWithin", () => assert("ArrayPrototypeCopyWithin" in index));
test("ArrayPrototypeEntries", () => assert("ArrayPrototypeEntries" in index));
test("ArrayPrototypeEvery", () => assert("ArrayPrototypeEvery" in index));
test("ArrayPrototypeFill", () => assert("ArrayPrototypeFill" in index));
test("ArrayPrototypeFilter", () => assert("ArrayPrototypeFilter" in index));
test("ArrayPrototypeFind", () => assert("ArrayPrototypeFind" in index));
test("ArrayPrototypeFindIndex", () => assert("ArrayPrototypeFindIndex" in index));
test("ArrayPrototypeFindLast", () => assert("ArrayPrototypeFindLast" in index));
test("ArrayPrototypeFindLastIndex", () => assert("ArrayPrototypeFindLastIndex" in index));
test("ArrayPrototypeFlat", () => assert("ArrayPrototypeFlat" in index));
test("ArrayPrototypeFlatMap", () => assert("ArrayPrototypeFlatMap" in index));
test("ArrayPrototypeForEach", () => assert("ArrayPrototypeForEach" in index));
test("ArrayPrototypeIncludes", () => assert("ArrayPrototypeIncludes" in index));
test("ArrayPrototypeIndexOf", () => assert("ArrayPrototypeIndexOf" in index));
test("ArrayPrototypeJoin", () => assert("ArrayPrototypeJoin" in index));
test("ArrayPrototypeKeys", () => assert("ArrayPrototypeKeys" in index));
test("ArrayPrototypeLastIndexOf", () => assert("ArrayPrototypeLastIndexOf" in index));
test("ArrayPrototypeLength", () => assert("ArrayPrototypeLength" in index));
test("ArrayPrototypeMap", () => assert("ArrayPrototypeMap" in index));
test("ArrayPrototypePop", () => assert("ArrayPrototypePop" in index));
test("ArrayPrototypePush", () => assert("ArrayPrototypePush" in index));
test("ArrayPrototypePushApply", () => assert("ArrayPrototypePushApply" in index));
test("ArrayPrototypeReduce", () => assert("ArrayPrototypeReduce" in index));
test("ArrayPrototypeReduceRight", () => assert("ArrayPrototypeReduceRight" in index));
test("ArrayPrototypeReverse", () => assert("ArrayPrototypeReverse" in index));
test("ArrayPrototypeShift", () => assert("ArrayPrototypeShift" in index));
test("ArrayPrototypeSlice", () => assert("ArrayPrototypeSlice" in index));
test("ArrayPrototypeSome", () => assert("ArrayPrototypeSome" in index));
test("ArrayPrototypeSort", () => assert("ArrayPrototypeSort" in index));
test("ArrayPrototypeSplice", () => assert("ArrayPrototypeSplice" in index));
test("ArrayPrototypeSymbolIterator", () => assert("ArrayPrototypeSymbolIterator" in index));
test("ArrayPrototypeSymbolUnscopables", () => assert("ArrayPrototypeSymbolUnscopables" in index));
test("ArrayPrototypeToLocaleString", () => assert("ArrayPrototypeToLocaleString" in index));
test("ArrayPrototypeToString", () => assert("ArrayPrototypeToString" in index));
test("ArrayPrototypeUnshift", () => assert("ArrayPrototypeUnshift" in index));
test("ArrayPrototypeUnshiftApply", () => assert("ArrayPrototypeUnshiftApply" in index));
test("ArrayPrototypeValues", () => assert("ArrayPrototypeValues" in index));
test("AsyncIteratorPrototype", () => assert("AsyncIteratorPrototype" in index));
test("BigInt", () => assert("BigInt" in index));
test("BigInt64Array", () => assert("BigInt64Array" in index));
test("BigInt64ArrayBYTES_PER_ELEMENT", () => assert("BigInt64ArrayBYTES_PER_ELEMENT" in index));
test("BigInt64ArrayLength", () => assert("BigInt64ArrayLength" in index));
test("BigInt64ArrayName", () => assert("BigInt64ArrayName" in index));
test("BigInt64ArrayPrototype", () => assert("BigInt64ArrayPrototype" in index));
test("BigInt64ArrayPrototypeBYTES_PER_ELEMENT", () => assert("BigInt64ArrayPrototypeBYTES_PER_ELEMENT" in index));
test("BigInt64ArrayPrototypeConstructor", () => assert("BigInt64ArrayPrototypeConstructor" in index));
test("BigIntAsIntN", () => assert("BigIntAsIntN" in index));
test("BigIntAsUintN", () => assert("BigIntAsUintN" in index));
test("BigIntLength", () => assert("BigIntLength" in index));
test("BigIntName", () => assert("BigIntName" in index));
test("BigIntPrototype", () => assert("BigIntPrototype" in index));
test("BigIntPrototypeConstructor", () => assert("BigIntPrototypeConstructor" in index));
test("BigIntPrototypeSymbolToStringTag", () => assert("BigIntPrototypeSymbolToStringTag" in index));
test("BigIntPrototypeToLocaleString", () => assert("BigIntPrototypeToLocaleString" in index));
test("BigIntPrototypeToString", () => assert("BigIntPrototypeToString" in index));
test("BigIntPrototypeValueOf", () => assert("BigIntPrototypeValueOf" in index));
test("BigUint64Array", () => assert("BigUint64Array" in index));
test("BigUint64ArrayBYTES_PER_ELEMENT", () => assert("BigUint64ArrayBYTES_PER_ELEMENT" in index));
test("BigUint64ArrayLength", () => assert("BigUint64ArrayLength" in index));
test("BigUint64ArrayName", () => assert("BigUint64ArrayName" in index));
test("BigUint64ArrayPrototype", () => assert("BigUint64ArrayPrototype" in index));
test("BigUint64ArrayPrototypeBYTES_PER_ELEMENT", () => assert("BigUint64ArrayPrototypeBYTES_PER_ELEMENT" in index));
test("BigUint64ArrayPrototypeConstructor", () => assert("BigUint64ArrayPrototypeConstructor" in index));
test("Boolean", () => assert("Boolean" in index));
test("BooleanLength", () => assert("BooleanLength" in index));
test("BooleanName", () => assert("BooleanName" in index));
test("BooleanPrototype", () => assert("BooleanPrototype" in index));
test("BooleanPrototypeConstructor", () => assert("BooleanPrototypeConstructor" in index));
test("BooleanPrototypeToString", () => assert("BooleanPrototypeToString" in index));
test("BooleanPrototypeValueOf", () => assert("BooleanPrototypeValueOf" in index));
test("DataView", () => assert("DataView" in index));
test("DataViewLength", () => assert("DataViewLength" in index));
test("DataViewName", () => assert("DataViewName" in index));
test("DataViewPrototype", () => assert("DataViewPrototype" in index));
test("DataViewPrototypeConstructor", () => assert("DataViewPrototypeConstructor" in index));
test("DataViewPrototypeGetBigInt64", () => assert("DataViewPrototypeGetBigInt64" in index));
test("DataViewPrototypeGetBigUint64", () => assert("DataViewPrototypeGetBigUint64" in index));
test("DataViewPrototypeGetBuffer", () => assert("DataViewPrototypeGetBuffer" in index));
test("DataViewPrototypeGetByteLength", () => assert("DataViewPrototypeGetByteLength" in index));
test("DataViewPrototypeGetByteOffset", () => assert("DataViewPrototypeGetByteOffset" in index));
test("DataViewPrototypeGetFloat32", () => assert("DataViewPrototypeGetFloat32" in index));
test("DataViewPrototypeGetFloat64", () => assert("DataViewPrototypeGetFloat64" in index));
test("DataViewPrototypeGetInt16", () => assert("DataViewPrototypeGetInt16" in index));
test("DataViewPrototypeGetInt32", () => assert("DataViewPrototypeGetInt32" in index));
test("DataViewPrototypeGetInt8", () => assert("DataViewPrototypeGetInt8" in index));
test("DataViewPrototypeGetUint16", () => assert("DataViewPrototypeGetUint16" in index));
test("DataViewPrototypeGetUint32", () => assert("DataViewPrototypeGetUint32" in index));
test("DataViewPrototypeGetUint8", () => assert("DataViewPrototypeGetUint8" in index));
test("DataViewPrototypeSetBigInt64", () => assert("DataViewPrototypeSetBigInt64" in index));
test("DataViewPrototypeSetBigUint64", () => assert("DataViewPrototypeSetBigUint64" in index));
test("DataViewPrototypeSetFloat32", () => assert("DataViewPrototypeSetFloat32" in index));
test("DataViewPrototypeSetFloat64", () => assert("DataViewPrototypeSetFloat64" in index));
test("DataViewPrototypeSetInt16", () => assert("DataViewPrototypeSetInt16" in index));
test("DataViewPrototypeSetInt32", () => assert("DataViewPrototypeSetInt32" in index));
test("DataViewPrototypeSetInt8", () => assert("DataViewPrototypeSetInt8" in index));
test("DataViewPrototypeSetUint16", () => assert("DataViewPrototypeSetUint16" in index));
test("DataViewPrototypeSetUint32", () => assert("DataViewPrototypeSetUint32" in index));
test("DataViewPrototypeSetUint8", () => assert("DataViewPrototypeSetUint8" in index));
test("DataViewPrototypeSymbolToStringTag", () => assert("DataViewPrototypeSymbolToStringTag" in index));
test("Date", () => assert("Date" in index));
test("DateLength", () => assert("DateLength" in index));
test("DateName", () => assert("DateName" in index));
test("DateNow", () => assert("DateNow" in index));
test("DateParse", () => assert("DateParse" in index));
test("DatePrototype", () => assert("DatePrototype" in index));
test("DatePrototypeConstructor", () => assert("DatePrototypeConstructor" in index));
test("DatePrototypeGetDate", () => assert("DatePrototypeGetDate" in index));
test("DatePrototypeGetDay", () => assert("DatePrototypeGetDay" in index));
test("DatePrototypeGetFullYear", () => assert("DatePrototypeGetFullYear" in index));
test("DatePrototypeGetHours", () => assert("DatePrototypeGetHours" in index));
test("DatePrototypeGetMilliseconds", () => assert("DatePrototypeGetMilliseconds" in index));
test("DatePrototypeGetMinutes", () => assert("DatePrototypeGetMinutes" in index));
test("DatePrototypeGetMonth", () => assert("DatePrototypeGetMonth" in index));
test("DatePrototypeGetSeconds", () => assert("DatePrototypeGetSeconds" in index));
test("DatePrototypeGetTime", () => assert("DatePrototypeGetTime" in index));
test("DatePrototypeGetTimezoneOffset", () => assert("DatePrototypeGetTimezoneOffset" in index));
test("DatePrototypeGetUTCDate", () => assert("DatePrototypeGetUTCDate" in index));
test("DatePrototypeGetUTCDay", () => assert("DatePrototypeGetUTCDay" in index));
test("DatePrototypeGetUTCFullYear", () => assert("DatePrototypeGetUTCFullYear" in index));
test("DatePrototypeGetUTCHours", () => assert("DatePrototypeGetUTCHours" in index));
test("DatePrototypeGetUTCMilliseconds", () => assert("DatePrototypeGetUTCMilliseconds" in index));
test("DatePrototypeGetUTCMinutes", () => assert("DatePrototypeGetUTCMinutes" in index));
test("DatePrototypeGetUTCMonth", () => assert("DatePrototypeGetUTCMonth" in index));
test("DatePrototypeGetUTCSeconds", () => assert("DatePrototypeGetUTCSeconds" in index));
test("DatePrototypeGetYear", () => assert("DatePrototypeGetYear" in index));
test("DatePrototypeSetDate", () => assert("DatePrototypeSetDate" in index));
test("DatePrototypeSetFullYear", () => assert("DatePrototypeSetFullYear" in index));
test("DatePrototypeSetHours", () => assert("DatePrototypeSetHours" in index));
test("DatePrototypeSetMilliseconds", () => assert("DatePrototypeSetMilliseconds" in index));
test("DatePrototypeSetMinutes", () => assert("DatePrototypeSetMinutes" in index));
test("DatePrototypeSetMonth", () => assert("DatePrototypeSetMonth" in index));
test("DatePrototypeSetSeconds", () => assert("DatePrototypeSetSeconds" in index));
test("DatePrototypeSetTime", () => assert("DatePrototypeSetTime" in index));
test("DatePrototypeSetUTCDate", () => assert("DatePrototypeSetUTCDate" in index));
test("DatePrototypeSetUTCFullYear", () => assert("DatePrototypeSetUTCFullYear" in index));
test("DatePrototypeSetUTCHours", () => assert("DatePrototypeSetUTCHours" in index));
test("DatePrototypeSetUTCMilliseconds", () => assert("DatePrototypeSetUTCMilliseconds" in index));
test("DatePrototypeSetUTCMinutes", () => assert("DatePrototypeSetUTCMinutes" in index));
test("DatePrototypeSetUTCMonth", () => assert("DatePrototypeSetUTCMonth" in index));
test("DatePrototypeSetUTCSeconds", () => assert("DatePrototypeSetUTCSeconds" in index));
test("DatePrototypeSetYear", () => assert("DatePrototypeSetYear" in index));
test("DatePrototypeSymbolToPrimitive", () => assert("DatePrototypeSymbolToPrimitive" in index));
test("DatePrototypeToDateString", () => assert("DatePrototypeToDateString" in index));
test("DatePrototypeToGMTString", () => assert("DatePrototypeToGMTString" in index));
test("DatePrototypeToISOString", () => assert("DatePrototypeToISOString" in index));
test("DatePrototypeToJSON", () => assert("DatePrototypeToJSON" in index));
test("DatePrototypeToLocaleDateString", () => assert("DatePrototypeToLocaleDateString" in index));
test("DatePrototypeToLocaleString", () => assert("DatePrototypeToLocaleString" in index));
test("DatePrototypeToLocaleTimeString", () => assert("DatePrototypeToLocaleTimeString" in index));
test("DatePrototypeToString", () => assert("DatePrototypeToString" in index));
test("DatePrototypeToTimeString", () => assert("DatePrototypeToTimeString" in index));
test("DatePrototypeToUTCString", () => assert("DatePrototypeToUTCString" in index));
test("DatePrototypeValueOf", () => assert("DatePrototypeValueOf" in index));
test("DateUTC", () => assert("DateUTC" in index));
test("Error", () => assert("Error" in index));
test("ErrorCaptureStackTrace", () => assert("ErrorCaptureStackTrace" in index));
test("ErrorLength", () => assert("ErrorLength" in index));
test("ErrorName", () => assert("ErrorName" in index));
test("ErrorPrototype", () => assert("ErrorPrototype" in index));
test("ErrorPrototypeConstructor", () => assert("ErrorPrototypeConstructor" in index));
test("ErrorPrototypeMessage", () => assert("ErrorPrototypeMessage" in index));
test("ErrorPrototypeName", () => assert("ErrorPrototypeName" in index));
test("ErrorPrototypeToString", () => assert("ErrorPrototypeToString" in index));
test("EvalError", () => assert("EvalError" in index));
test("EvalErrorLength", () => assert("EvalErrorLength" in index));
test("EvalErrorName", () => assert("EvalErrorName" in index));
test("EvalErrorPrototype", () => assert("EvalErrorPrototype" in index));
test("EvalErrorPrototypeConstructor", () => assert("EvalErrorPrototypeConstructor" in index));
test("EvalErrorPrototypeMessage", () => assert("EvalErrorPrototypeMessage" in index));
test("EvalErrorPrototypeName", () => assert("EvalErrorPrototypeName" in index));
test("FinalizationRegistry", () => assert("FinalizationRegistry" in index));
test("FinalizationRegistryLength", () => assert("FinalizationRegistryLength" in index));
test("FinalizationRegistryName", () => assert("FinalizationRegistryName" in index));
test("FinalizationRegistryPrototype", () => assert("FinalizationRegistryPrototype" in index));
test("FinalizationRegistryPrototypeConstructor", () => assert("FinalizationRegistryPrototypeConstructor" in index));
test("FinalizationRegistryPrototypeRegister", () => assert("FinalizationRegistryPrototypeRegister" in index));
test("FinalizationRegistryPrototypeSymbolToStringTag", () => assert("FinalizationRegistryPrototypeSymbolToStringTag" in index));
test("FinalizationRegistryPrototypeUnregister", () => assert("FinalizationRegistryPrototypeUnregister" in index));
test("Float32Array", () => assert("Float32Array" in index));
test("Float32ArrayBYTES_PER_ELEMENT", () => assert("Float32ArrayBYTES_PER_ELEMENT" in index));
test("Float32ArrayLength", () => assert("Float32ArrayLength" in index));
test("Float32ArrayName", () => assert("Float32ArrayName" in index));
test("Float32ArrayPrototype", () => assert("Float32ArrayPrototype" in index));
test("Float32ArrayPrototypeBYTES_PER_ELEMENT", () => assert("Float32ArrayPrototypeBYTES_PER_ELEMENT" in index));
test("Float32ArrayPrototypeConstructor", () => assert("Float32ArrayPrototypeConstructor" in index));
test("Float64Array", () => assert("Float64Array" in index));
test("Float64ArrayBYTES_PER_ELEMENT", () => assert("Float64ArrayBYTES_PER_ELEMENT" in index));
test("Float64ArrayLength", () => assert("Float64ArrayLength" in index));
test("Float64ArrayName", () => assert("Float64ArrayName" in index));
test("Float64ArrayPrototype", () => assert("Float64ArrayPrototype" in index));
test("Float64ArrayPrototypeBYTES_PER_ELEMENT", () => assert("Float64ArrayPrototypeBYTES_PER_ELEMENT" in index));
test("Float64ArrayPrototypeConstructor", () => assert("Float64ArrayPrototypeConstructor" in index));
test("Function", () => assert("Function" in index));
test("FunctionLength", () => assert("FunctionLength" in index));
test("FunctionName", () => assert("FunctionName" in index));
test("FunctionPrototype", () => assert("FunctionPrototype" in index));
test("FunctionPrototypeApply", () => assert("FunctionPrototypeApply" in index));
test("FunctionPrototypeBind", () => assert("FunctionPrototypeBind" in index));
test("FunctionPrototypeCall", () => assert("FunctionPrototypeCall" in index));
test("FunctionPrototypeConstructor", () => assert("FunctionPrototypeConstructor" in index));
test("FunctionPrototypeGetArguments", () => assert("FunctionPrototypeGetArguments" in index));
test("FunctionPrototypeGetCaller", () => assert("FunctionPrototypeGetCaller" in index));
test("FunctionPrototypeLength", () => assert("FunctionPrototypeLength" in index));
test("FunctionPrototypeName", () => assert("FunctionPrototypeName" in index));
test("FunctionPrototypeSetArguments", () => assert("FunctionPrototypeSetArguments" in index));
test("FunctionPrototypeSetCaller", () => assert("FunctionPrototypeSetCaller" in index));
test("FunctionPrototypeSymbolHasInstance", () => assert("FunctionPrototypeSymbolHasInstance" in index));
test("FunctionPrototypeToString", () => assert("FunctionPrototypeToString" in index));
test("Int16Array", () => assert("Int16Array" in index));
test("Int16ArrayBYTES_PER_ELEMENT", () => assert("Int16ArrayBYTES_PER_ELEMENT" in index));
test("Int16ArrayLength", () => assert("Int16ArrayLength" in index));
test("Int16ArrayName", () => assert("Int16ArrayName" in index));
test("Int16ArrayPrototype", () => assert("Int16ArrayPrototype" in index));
test("Int16ArrayPrototypeBYTES_PER_ELEMENT", () => assert("Int16ArrayPrototypeBYTES_PER_ELEMENT" in index));
test("Int16ArrayPrototypeConstructor", () => assert("Int16ArrayPrototypeConstructor" in index));
test("Int32Array", () => assert("Int32Array" in index));
test("Int32ArrayBYTES_PER_ELEMENT", () => assert("Int32ArrayBYTES_PER_ELEMENT" in index));
test("Int32ArrayLength", () => assert("Int32ArrayLength" in index));
test("Int32ArrayName", () => assert("Int32ArrayName" in index));
test("Int32ArrayPrototype", () => assert("Int32ArrayPrototype" in index));
test("Int32ArrayPrototypeBYTES_PER_ELEMENT", () => assert("Int32ArrayPrototypeBYTES_PER_ELEMENT" in index));
test("Int32ArrayPrototypeConstructor", () => assert("Int32ArrayPrototypeConstructor" in index));
test("Int8Array", () => assert("Int8Array" in index));
test("Int8ArrayBYTES_PER_ELEMENT", () => assert("Int8ArrayBYTES_PER_ELEMENT" in index));
test("Int8ArrayLength", () => assert("Int8ArrayLength" in index));
test("Int8ArrayName", () => assert("Int8ArrayName" in index));
test("Int8ArrayPrototype", () => assert("Int8ArrayPrototype" in index));
test("Int8ArrayPrototypeBYTES_PER_ELEMENT", () => assert("Int8ArrayPrototypeBYTES_PER_ELEMENT" in index));
test("Int8ArrayPrototypeConstructor", () => assert("Int8ArrayPrototypeConstructor" in index));
test("IteratorPrototype", () => assert("IteratorPrototype" in index));
test("JSONParse", () => assert("JSONParse" in index));
test("JSONStringify", () => assert("JSONStringify" in index));
test("JSONSymbolToStringTag", () => assert("JSONSymbolToStringTag" in index));
test("Map", () => assert("Map" in index));
test("MapGetSymbolSpecies", () => assert("MapGetSymbolSpecies" in index));
test("MapLength", () => assert("MapLength" in index));
test("MapName", () => assert("MapName" in index));
test("MapPrototype", () => assert("MapPrototype" in index));
test("MapPrototypeClear", () => assert("MapPrototypeClear" in index));
test("MapPrototypeConstructor", () => assert("MapPrototypeConstructor" in index));
test("MapPrototypeDelete", () => assert("MapPrototypeDelete" in index));
test("MapPrototypeEntries", () => assert("MapPrototypeEntries" in index));
test("MapPrototypeForEach", () => assert("MapPrototypeForEach" in index));
test("MapPrototypeGet", () => assert("MapPrototypeGet" in index));
test("MapPrototypeGetSize", () => assert("MapPrototypeGetSize" in index));
test("MapPrototypeHas", () => assert("MapPrototypeHas" in index));
test("MapPrototypeKeys", () => assert("MapPrototypeKeys" in index));
test("MapPrototypeSet", () => assert("MapPrototypeSet" in index));
test("MapPrototypeSymbolIterator", () => assert("MapPrototypeSymbolIterator" in index));
test("MapPrototypeSymbolToStringTag", () => assert("MapPrototypeSymbolToStringTag" in index));
test("MapPrototypeValues", () => assert("MapPrototypeValues" in index));
test("MathAbs", () => assert("MathAbs" in index));
test("MathAcos", () => assert("MathAcos" in index));
test("MathAcosh", () => assert("MathAcosh" in index));
test("MathAsin", () => assert("MathAsin" in index));
test("MathAsinh", () => assert("MathAsinh" in index));
test("MathAtan", () => assert("MathAtan" in index));
test("MathAtan2", () => assert("MathAtan2" in index));
test("MathAtanh", () => assert("MathAtanh" in index));
test("MathCbrt", () => assert("MathCbrt" in index));
test("MathCeil", () => assert("MathCeil" in index));
test("MathClz32", () => assert("MathClz32" in index));
test("MathCos", () => assert("MathCos" in index));
test("MathCosh", () => assert("MathCosh" in index));
test("MathE", () => assert("MathE" in index));
test("MathExp", () => assert("MathExp" in index));
test("MathExpm1", () => assert("MathExpm1" in index));
test("MathFloor", () => assert("MathFloor" in index));
test("MathFround", () => assert("MathFround" in index));
test("MathHypot", () => assert("MathHypot" in index));
test("MathHypotApply", () => assert("MathHypotApply" in index));
test("MathImul", () => assert("MathImul" in index));
test("MathLN10", () => assert("MathLN10" in index));
test("MathLN2", () => assert("MathLN2" in index));
test("MathLOG10E", () => assert("MathLOG10E" in index));
test("MathLOG2E", () => assert("MathLOG2E" in index));
test("MathLog", () => assert("MathLog" in index));
test("MathLog10", () => assert("MathLog10" in index));
test("MathLog1p", () => assert("MathLog1p" in index));
test("MathLog2", () => assert("MathLog2" in index));
test("MathMax", () => assert("MathMax" in index));
test("MathMaxApply", () => assert("MathMaxApply" in index));
test("MathMin", () => assert("MathMin" in index));
test("MathMinApply", () => assert("MathMinApply" in index));
test("MathPI", () => assert("MathPI" in index));
test("MathPow", () => assert("MathPow" in index));
test("MathRandom", () => assert("MathRandom" in index));
test("MathRound", () => assert("MathRound" in index));
test("MathSQRT1_2", () => assert("MathSQRT1_2" in index));
test("MathSQRT2", () => assert("MathSQRT2" in index));
test("MathSign", () => assert("MathSign" in index));
test("MathSin", () => assert("MathSin" in index));
test("MathSinh", () => assert("MathSinh" in index));
test("MathSqrt", () => assert("MathSqrt" in index));
test("MathSymbolToStringTag", () => assert("MathSymbolToStringTag" in index));
test("MathTan", () => assert("MathTan" in index));
test("MathTanh", () => assert("MathTanh" in index));
test("MathTrunc", () => assert("MathTrunc" in index));
test("Number", () => assert("Number" in index));
test("NumberEPSILON", () => assert("NumberEPSILON" in index));
test("NumberIsFinite", () => assert("NumberIsFinite" in index));
test("NumberIsInteger", () => assert("NumberIsInteger" in index));
test("NumberIsNaN", () => assert("NumberIsNaN" in index));
test("NumberIsSafeInteger", () => assert("NumberIsSafeInteger" in index));
test("NumberLength", () => assert("NumberLength" in index));
test("NumberMAX_SAFE_INTEGER", () => assert("NumberMAX_SAFE_INTEGER" in index));
test("NumberMAX_VALUE", () => assert("NumberMAX_VALUE" in index));
test("NumberMIN_SAFE_INTEGER", () => assert("NumberMIN_SAFE_INTEGER" in index));
test("NumberMIN_VALUE", () => assert("NumberMIN_VALUE" in index));
test("NumberNEGATIVE_INFINITY", () => assert("NumberNEGATIVE_INFINITY" in index));
test("NumberNaN", () => assert("NumberNaN" in index));
test("NumberName", () => assert("NumberName" in index));
test("NumberPOSITIVE_INFINITY", () => assert("NumberPOSITIVE_INFINITY" in index));
test("NumberParseFloat", () => assert("NumberParseFloat" in index));
test("NumberParseInt", () => assert("NumberParseInt" in index));
test("NumberPrototype", () => assert("NumberPrototype" in index));
test("NumberPrototypeConstructor", () => assert("NumberPrototypeConstructor" in index));
test("NumberPrototypeToExponential", () => assert("NumberPrototypeToExponential" in index));
test("NumberPrototypeToFixed", () => assert("NumberPrototypeToFixed" in index));
test("NumberPrototypeToLocaleString", () => assert("NumberPrototypeToLocaleString" in index));
test("NumberPrototypeToPrecision", () => assert("NumberPrototypeToPrecision" in index));
test("NumberPrototypeToString", () => assert("NumberPrototypeToString" in index));
test("NumberPrototypeValueOf", () => assert("NumberPrototypeValueOf" in index));
test("Object", () => assert("Object" in index));
test("ObjectAssign", () => assert("ObjectAssign" in index));
test("ObjectCreate", () => assert("ObjectCreate" in index));
test("ObjectDefineProperties", () => assert("ObjectDefineProperties" in index));
test("ObjectDefineProperty", () => assert("ObjectDefineProperty" in index));
test("ObjectEntries", () => assert("ObjectEntries" in index));
test("ObjectFreeze", () => assert("ObjectFreeze" in index));
test("ObjectFromEntries", () => assert("ObjectFromEntries" in index));
test("ObjectGetOwnPropertyDescriptor", () => assert("ObjectGetOwnPropertyDescriptor" in index));
test("ObjectGetOwnPropertyDescriptors", () => assert("ObjectGetOwnPropertyDescriptors" in index));
test("ObjectGetOwnPropertyNames", () => assert("ObjectGetOwnPropertyNames" in index));
test("ObjectGetOwnPropertySymbols", () => assert("ObjectGetOwnPropertySymbols" in index));
test("ObjectGetPrototypeOf", () => assert("ObjectGetPrototypeOf" in index));
test("ObjectHasOwn", () => assert("ObjectHasOwn" in index));
test("ObjectIs", () => assert("ObjectIs" in index));
test("ObjectIsExtensible", () => assert("ObjectIsExtensible" in index));
test("ObjectIsFrozen", () => assert("ObjectIsFrozen" in index));
test("ObjectIsSealed", () => assert("ObjectIsSealed" in index));
test("ObjectKeys", () => assert("ObjectKeys" in index));
test("ObjectLength", () => assert("ObjectLength" in index));
test("ObjectName", () => assert("ObjectName" in index));
test("ObjectPreventExtensions", () => assert("ObjectPreventExtensions" in index));
test("ObjectPrototype", () => assert("ObjectPrototype" in index));
test("ObjectPrototypeConstructor", () => assert("ObjectPrototypeConstructor" in index));
test("ObjectPrototypeGet__proto__", () => assert("ObjectPrototypeGet__proto__" in index));
test("ObjectPrototypeHasOwnProperty", () => assert("ObjectPrototypeHasOwnProperty" in index));
test("ObjectPrototypeIsPrototypeOf", () => assert("ObjectPrototypeIsPrototypeOf" in index));
test("ObjectPrototypePropertyIsEnumerable", () => assert("ObjectPrototypePropertyIsEnumerable" in index));
test("ObjectPrototypeSet__proto__", () => assert("ObjectPrototypeSet__proto__" in index));
test("ObjectPrototypeToLocaleString", () => assert("ObjectPrototypeToLocaleString" in index));
test("ObjectPrototypeToString", () => assert("ObjectPrototypeToString" in index));
test("ObjectPrototypeValueOf", () => assert("ObjectPrototypeValueOf" in index));
test("ObjectPrototype__defineGetter__", () => assert("ObjectPrototype__defineGetter__" in index));
test("ObjectPrototype__defineSetter__", () => assert("ObjectPrototype__defineSetter__" in index));
test("ObjectPrototype__lookupGetter__", () => assert("ObjectPrototype__lookupGetter__" in index));
test("ObjectPrototype__lookupSetter__", () => assert("ObjectPrototype__lookupSetter__" in index));
test("ObjectSeal", () => assert("ObjectSeal" in index));
test("ObjectSetPrototypeOf", () => assert("ObjectSetPrototypeOf" in index));
test("ObjectValues", () => assert("ObjectValues" in index));
test("Promise", () => assert("Promise" in index));
test("PromiseAll", () => assert("PromiseAll" in index));
test("PromiseAllSettled", () => assert("PromiseAllSettled" in index));
test("PromiseAny", () => assert("PromiseAny" in index));
test("PromiseGetSymbolSpecies", () => assert("PromiseGetSymbolSpecies" in index));
test("PromiseLength", () => assert("PromiseLength" in index));
test("PromiseName", () => assert("PromiseName" in index));
test("PromisePrototype", () => assert("PromisePrototype" in index));
test("PromisePrototypeCatch", () => assert("PromisePrototypeCatch" in index));
test("PromisePrototypeConstructor", () => assert("PromisePrototypeConstructor" in index));
test("PromisePrototypeFinally", () => assert("PromisePrototypeFinally" in index));
test("PromisePrototypeSymbolToStringTag", () => assert("PromisePrototypeSymbolToStringTag" in index));
test("PromisePrototypeThen", () => assert("PromisePrototypeThen" in index));
test("PromiseRace", () => assert("PromiseRace" in index));
test("PromiseReject", () => assert("PromiseReject" in index));
test("PromiseResolve", () => assert("PromiseResolve" in index));
test("Proxy", () => assert("Proxy" in index));
test("ProxyLength", () => assert("ProxyLength" in index));
test("ProxyName", () => assert("ProxyName" in index));
test("ProxyRevocable", () => assert("ProxyRevocable" in index));
test("RangeError", () => assert("RangeError" in index));
test("RangeErrorLength", () => assert("RangeErrorLength" in index));
test("RangeErrorName", () => assert("RangeErrorName" in index));
test("RangeErrorPrototype", () => assert("RangeErrorPrototype" in index));
test("RangeErrorPrototypeConstructor", () => assert("RangeErrorPrototypeConstructor" in index));
test("RangeErrorPrototypeMessage", () => assert("RangeErrorPrototypeMessage" in index));
test("RangeErrorPrototypeName", () => assert("RangeErrorPrototypeName" in index));
test("ReferenceError", () => assert("ReferenceError" in index));
test("ReferenceErrorLength", () => assert("ReferenceErrorLength" in index));
test("ReferenceErrorName", () => assert("ReferenceErrorName" in index));
test("ReferenceErrorPrototype", () => assert("ReferenceErrorPrototype" in index));
test("ReferenceErrorPrototypeConstructor", () => assert("ReferenceErrorPrototypeConstructor" in index));
test("ReferenceErrorPrototypeMessage", () => assert("ReferenceErrorPrototypeMessage" in index));
test("ReferenceErrorPrototypeName", () => assert("ReferenceErrorPrototypeName" in index));
test("ReflectApply", () => assert("ReflectApply" in index));
test("ReflectConstruct", () => assert("ReflectConstruct" in index));
test("ReflectDefineProperty", () => assert("ReflectDefineProperty" in index));
test("ReflectDeleteProperty", () => assert("ReflectDeleteProperty" in index));
test("ReflectGet", () => assert("ReflectGet" in index));
test("ReflectGetOwnPropertyDescriptor", () => assert("ReflectGetOwnPropertyDescriptor" in index));
test("ReflectGetPrototypeOf", () => assert("ReflectGetPrototypeOf" in index));
test("ReflectHas", () => assert("ReflectHas" in index));
test("ReflectIsExtensible", () => assert("ReflectIsExtensible" in index));
test("ReflectOwnKeys", () => assert("ReflectOwnKeys" in index));
test("ReflectPreventExtensions", () => assert("ReflectPreventExtensions" in index));
test("ReflectSet", () => assert("ReflectSet" in index));
test("ReflectSetPrototypeOf", () => assert("ReflectSetPrototypeOf" in index));
test("ReflectSymbolToStringTag", () => assert("ReflectSymbolToStringTag" in index));
test("RegExp", () => assert("RegExp" in index));
test("RegExpGet$&", () => assert("RegExpGet$&" in index));
test("RegExpGet$'", () => assert("RegExpGet$'" in index));
test("RegExpGet$+", () => assert("RegExpGet$+" in index));
test("RegExpGet$1", () => assert("RegExpGet$1" in index));
test("RegExpGet$2", () => assert("RegExpGet$2" in index));
test("RegExpGet$3", () => assert("RegExpGet$3" in index));
test("RegExpGet$4", () => assert("RegExpGet$4" in index));
test("RegExpGet$5", () => assert("RegExpGet$5" in index));
test("RegExpGet$6", () => assert("RegExpGet$6" in index));
test("RegExpGet$7", () => assert("RegExpGet$7" in index));
test("RegExpGet$8", () => assert("RegExpGet$8" in index));
test("RegExpGet$9", () => assert("RegExpGet$9" in index));
test("RegExpGet$_", () => assert("RegExpGet$_" in index));
test("RegExpGet$`", () => assert("RegExpGet$`" in index));
test("RegExpGetInput", () => assert("RegExpGetInput" in index));
test("RegExpGetLastMatch", () => assert("RegExpGetLastMatch" in index));
test("RegExpGetLastParen", () => assert("RegExpGetLastParen" in index));
test("RegExpGetLeftContext", () => assert("RegExpGetLeftContext" in index));
test("RegExpGetRightContext", () => assert("RegExpGetRightContext" in index));
test("RegExpGetSymbolSpecies", () => assert("RegExpGetSymbolSpecies" in index));
test("RegExpLength", () => assert("RegExpLength" in index));
test("RegExpName", () => assert("RegExpName" in index));
test("RegExpPrototype", () => assert("RegExpPrototype" in index));
test("RegExpPrototypeCompile", () => assert("RegExpPrototypeCompile" in index));
test("RegExpPrototypeConstructor", () => assert("RegExpPrototypeConstructor" in index));
test("RegExpPrototypeExec", () => assert("RegExpPrototypeExec" in index));
test("RegExpPrototypeGetDotAll", () => assert("RegExpPrototypeGetDotAll" in index));
test("RegExpPrototypeGetFlags", () => assert("RegExpPrototypeGetFlags" in index));
test("RegExpPrototypeGetGlobal", () => assert("RegExpPrototypeGetGlobal" in index));
test("RegExpPrototypeGetHasIndices", () => assert("RegExpPrototypeGetHasIndices" in index));
test("RegExpPrototypeGetIgnoreCase", () => assert("RegExpPrototypeGetIgnoreCase" in index));
test("RegExpPrototypeGetMultiline", () => assert("RegExpPrototypeGetMultiline" in index));
test("RegExpPrototypeGetSource", () => assert("RegExpPrototypeGetSource" in index));
test("RegExpPrototypeGetSticky", () => assert("RegExpPrototypeGetSticky" in index));
test("RegExpPrototypeGetUnicode", () => assert("RegExpPrototypeGetUnicode" in index));
test("RegExpPrototypeSymbolMatch", () => assert("RegExpPrototypeSymbolMatch" in index));
test("RegExpPrototypeSymbolMatchAll", () => assert("RegExpPrototypeSymbolMatchAll" in index));
test("RegExpPrototypeSymbolReplace", () => assert("RegExpPrototypeSymbolReplace" in index));
test("RegExpPrototypeSymbolSearch", () => assert("RegExpPrototypeSymbolSearch" in index));
test("RegExpPrototypeSymbolSplit", () => assert("RegExpPrototypeSymbolSplit" in index));
test("RegExpPrototypeTest", () => assert("RegExpPrototypeTest" in index));
test("RegExpPrototypeToString", () => assert("RegExpPrototypeToString" in index));
test("RegExpSet$&", () => assert("RegExpSet$&" in index));
test("RegExpSet$'", () => assert("RegExpSet$'" in index));
test("RegExpSet$+", () => assert("RegExpSet$+" in index));
test("RegExpSet$1", () => assert("RegExpSet$1" in index));
test("RegExpSet$2", () => assert("RegExpSet$2" in index));
test("RegExpSet$3", () => assert("RegExpSet$3" in index));
test("RegExpSet$4", () => assert("RegExpSet$4" in index));
test("RegExpSet$5", () => assert("RegExpSet$5" in index));
test("RegExpSet$6", () => assert("RegExpSet$6" in index));
test("RegExpSet$7", () => assert("RegExpSet$7" in index));
test("RegExpSet$8", () => assert("RegExpSet$8" in index));
test("RegExpSet$9", () => assert("RegExpSet$9" in index));
test("RegExpSet$_", () => assert("RegExpSet$_" in index));
test("RegExpSet$`", () => assert("RegExpSet$`" in index));
test("RegExpSetInput", () => assert("RegExpSetInput" in index));
test("RegExpSetLastMatch", () => assert("RegExpSetLastMatch" in index));
test("RegExpSetLastParen", () => assert("RegExpSetLastParen" in index));
test("RegExpSetLeftContext", () => assert("RegExpSetLeftContext" in index));
test("RegExpSetRightContext", () => assert("RegExpSetRightContext" in index));
test("SafeArrayIterator", () => assert("SafeArrayIterator" in index));
test("SafeFinalizationRegistry", () => assert("SafeFinalizationRegistry" in index));
test("SafeMap", () => assert("SafeMap" in index));
test("SafePromiseAll", () => assert("SafePromiseAll" in index));
test("SafePromiseAllReturnArrayLike", () => assert("SafePromiseAllReturnArrayLike" in index));
test("SafePromiseAllReturnVoid", () => assert("SafePromiseAllReturnVoid" in index));
test("SafePromiseAllSettled", () => assert("SafePromiseAllSettled" in index));
test("SafePromiseAllSettledReturnVoid", () => assert("SafePromiseAllSettledReturnVoid" in index));
test("SafePromiseAny", () => assert("SafePromiseAny" in index));
test("SafePromisePrototypeFinally", () => assert("SafePromisePrototypeFinally" in index));
test("SafePromiseRace", () => assert("SafePromiseRace" in index));
test("SafeSet", () => assert("SafeSet" in index));
test("SafeStringIterator", () => assert("SafeStringIterator" in index));
test("SafeStringPrototypeSearch", () => assert("SafeStringPrototypeSearch" in index));
test("SafeWeakMap", () => assert("SafeWeakMap" in index));
test("SafeWeakRef", () => assert("SafeWeakRef" in index));
test("SafeWeakSet", () => assert("SafeWeakSet" in index));
test("Set", () => assert("Set" in index));
test("SetGetSymbolSpecies", () => assert("SetGetSymbolSpecies" in index));
test("SetLength", () => assert("SetLength" in index));
test("SetName", () => assert("SetName" in index));
test("SetPrototype", () => assert("SetPrototype" in index));
test("SetPrototypeAdd", () => assert("SetPrototypeAdd" in index));
test("SetPrototypeClear", () => assert("SetPrototypeClear" in index));
test("SetPrototypeConstructor", () => assert("SetPrototypeConstructor" in index));
test("SetPrototypeDelete", () => assert("SetPrototypeDelete" in index));
test("SetPrototypeEntries", () => assert("SetPrototypeEntries" in index));
test("SetPrototypeForEach", () => assert("SetPrototypeForEach" in index));
test("SetPrototypeGetSize", () => assert("SetPrototypeGetSize" in index));
test("SetPrototypeHas", () => assert("SetPrototypeHas" in index));
test("SetPrototypeKeys", () => assert("SetPrototypeKeys" in index));
test("SetPrototypeSymbolIterator", () => assert("SetPrototypeSymbolIterator" in index));
test("SetPrototypeSymbolToStringTag", () => assert("SetPrototypeSymbolToStringTag" in index));
test("SetPrototypeValues", () => assert("SetPrototypeValues" in index));
test("String", () => assert("String" in index));
test("StringFromCharCode", () => assert("StringFromCharCode" in index));
test("StringFromCharCodeApply", () => assert("StringFromCharCodeApply" in index));
test("StringFromCodePoint", () => assert("StringFromCodePoint" in index));
test("StringFromCodePointApply", () => assert("StringFromCodePointApply" in index));
test("StringIterator", () => assert("StringIterator" in index));
test("StringIteratorPrototype", () => assert("StringIteratorPrototype" in index));
test("StringIteratorPrototypeNext", () => assert("StringIteratorPrototypeNext" in index));
test("StringIteratorPrototypeSymbolToStringTag", () => assert("StringIteratorPrototypeSymbolToStringTag" in index));
test("StringLength", () => assert("StringLength" in index));
test("StringName", () => assert("StringName" in index));
test("StringPrototype", () => assert("StringPrototype" in index));
test("StringPrototypeAnchor", () => assert("StringPrototypeAnchor" in index));
test("StringPrototypeAt", () => assert("StringPrototypeAt" in index));
test("StringPrototypeBig", () => assert("StringPrototypeBig" in index));
test("StringPrototypeBlink", () => assert("StringPrototypeBlink" in index));
test("StringPrototypeBold", () => assert("StringPrototypeBold" in index));
test("StringPrototypeCharAt", () => assert("StringPrototypeCharAt" in index));
test("StringPrototypeCharCodeAt", () => assert("StringPrototypeCharCodeAt" in index));
test("StringPrototypeCodePointAt", () => assert("StringPrototypeCodePointAt" in index));
test("StringPrototypeConcat", () => assert("StringPrototypeConcat" in index));
test("StringPrototypeConcatApply", () => assert("StringPrototypeConcatApply" in index));
test("StringPrototypeConstructor", () => assert("StringPrototypeConstructor" in index));
test("StringPrototypeEndsWith", () => assert("StringPrototypeEndsWith" in index));
test("StringPrototypeFixed", () => assert("StringPrototypeFixed" in index));
test("StringPrototypeFontcolor", () => assert("StringPrototypeFontcolor" in index));
test("StringPrototypeFontsize", () => assert("StringPrototypeFontsize" in index));
test("StringPrototypeIncludes", () => assert("StringPrototypeIncludes" in index));
test("StringPrototypeIndexOf", () => assert("StringPrototypeIndexOf" in index));
test("StringPrototypeItalics", () => assert("StringPrototypeItalics" in index));
test("StringPrototypeLastIndexOf", () => assert("StringPrototypeLastIndexOf" in index));
test("StringPrototypeLength", () => assert("StringPrototypeLength" in index));
test("StringPrototypeLink", () => assert("StringPrototypeLink" in index));
test("StringPrototypeLocaleCompare", () => assert("StringPrototypeLocaleCompare" in index));
test("StringPrototypeMatch", () => assert("StringPrototypeMatch" in index));
test("StringPrototypeMatchAll", () => assert("StringPrototypeMatchAll" in index));
test("StringPrototypeNormalize", () => assert("StringPrototypeNormalize" in index));
test("StringPrototypePadEnd", () => assert("StringPrototypePadEnd" in index));
test("StringPrototypePadStart", () => assert("StringPrototypePadStart" in index));
test("StringPrototypeRepeat", () => assert("StringPrototypeRepeat" in index));
test("StringPrototypeReplace", () => assert("StringPrototypeReplace" in index));
test("StringPrototypeReplaceAll", () => assert("StringPrototypeReplaceAll" in index));
test("StringPrototypeSearch", () => assert("StringPrototypeSearch" in index));
test("StringPrototypeSlice", () => assert("StringPrototypeSlice" in index));
test("StringPrototypeSmall", () => assert("StringPrototypeSmall" in index));
test("StringPrototypeSplit", () => assert("StringPrototypeSplit" in index));
test("StringPrototypeStartsWith", () => assert("StringPrototypeStartsWith" in index));
test("StringPrototypeStrike", () => assert("StringPrototypeStrike" in index));
test("StringPrototypeSub", () => assert("StringPrototypeSub" in index));
test("StringPrototypeSubstr", () => assert("StringPrototypeSubstr" in index));
test("StringPrototypeSubstring", () => assert("StringPrototypeSubstring" in index));
test("StringPrototypeSup", () => assert("StringPrototypeSup" in index));
test("StringPrototypeSymbolIterator", () => assert("StringPrototypeSymbolIterator" in index));
test("StringPrototypeToLocaleLowerCase", () => assert("StringPrototypeToLocaleLowerCase" in index));
test("StringPrototypeToLocaleUpperCase", () => assert("StringPrototypeToLocaleUpperCase" in index));
test("StringPrototypeToLowerCase", () => assert("StringPrototypeToLowerCase" in index));
test("StringPrototypeToString", () => assert("StringPrototypeToString" in index));
test("StringPrototypeToUpperCase", () => assert("StringPrototypeToUpperCase" in index));
test("StringPrototypeTrim", () => assert("StringPrototypeTrim" in index));
test("StringPrototypeTrimEnd", () => assert("StringPrototypeTrimEnd" in index));
test("StringPrototypeTrimLeft", () => assert("StringPrototypeTrimLeft" in index));
test("StringPrototypeTrimRight", () => assert("StringPrototypeTrimRight" in index));
test("StringPrototypeTrimStart", () => assert("StringPrototypeTrimStart" in index));
test("StringPrototypeValueOf", () => assert("StringPrototypeValueOf" in index));
test("StringRaw", () => assert("StringRaw" in index));
test("Symbol", () => assert("Symbol" in index));
test("SymbolAsyncIterator", () => assert("SymbolAsyncIterator" in index));
test("SymbolFor", () => assert("SymbolFor" in index));
test("SymbolHasInstance", () => assert("SymbolHasInstance" in index));
test("SymbolIsConcatSpreadable", () => assert("SymbolIsConcatSpreadable" in index));
test("SymbolIterator", () => assert("SymbolIterator" in index));
test("SymbolKeyFor", () => assert("SymbolKeyFor" in index));
test("SymbolLength", () => assert("SymbolLength" in index));
test("SymbolMatch", () => assert("SymbolMatch" in index));
test("SymbolMatchAll", () => assert("SymbolMatchAll" in index));
test("SymbolName", () => assert("SymbolName" in index));
test("SymbolPrototype", () => assert("SymbolPrototype" in index));
test("SymbolPrototypeConstructor", () => assert("SymbolPrototypeConstructor" in index));
test("SymbolPrototypeGetDescription", () => assert("SymbolPrototypeGetDescription" in index));
test("SymbolPrototypeSymbolToPrimitive", () => assert("SymbolPrototypeSymbolToPrimitive" in index));
test("SymbolPrototypeSymbolToStringTag", () => assert("SymbolPrototypeSymbolToStringTag" in index));
test("SymbolPrototypeToString", () => assert("SymbolPrototypeToString" in index));
test("SymbolPrototypeValueOf", () => assert("SymbolPrototypeValueOf" in index));
test("SymbolReplace", () => assert("SymbolReplace" in index));
test("SymbolSearch", () => assert("SymbolSearch" in index));
test("SymbolSpecies", () => assert("SymbolSpecies" in index));
test("SymbolSplit", () => assert("SymbolSplit" in index));
test("SymbolToPrimitive", () => assert("SymbolToPrimitive" in index));
test("SymbolToStringTag", () => assert("SymbolToStringTag" in index));
test("SymbolUnscopables", () => assert("SymbolUnscopables" in index));
test("SyntaxError", () => assert("SyntaxError" in index));
test("SyntaxErrorLength", () => assert("SyntaxErrorLength" in index));
test("SyntaxErrorName", () => assert("SyntaxErrorName" in index));
test("SyntaxErrorPrototype", () => assert("SyntaxErrorPrototype" in index));
test("SyntaxErrorPrototypeConstructor", () => assert("SyntaxErrorPrototypeConstructor" in index));
test("SyntaxErrorPrototypeMessage", () => assert("SyntaxErrorPrototypeMessage" in index));
test("SyntaxErrorPrototypeName", () => assert("SyntaxErrorPrototypeName" in index));
test("TypeError", () => assert("TypeError" in index));
test("TypeErrorLength", () => assert("TypeErrorLength" in index));
test("TypeErrorName", () => assert("TypeErrorName" in index));
test("TypeErrorPrototype", () => assert("TypeErrorPrototype" in index));
test("TypeErrorPrototypeConstructor", () => assert("TypeErrorPrototypeConstructor" in index));
test("TypeErrorPrototypeMessage", () => assert("TypeErrorPrototypeMessage" in index));
test("TypeErrorPrototypeName", () => assert("TypeErrorPrototypeName" in index));
test("TypedArray", () => assert("TypedArray" in index));
test("TypedArrayFrom", () => assert("TypedArrayFrom" in index));
test("TypedArrayGetSymbolSpecies", () => assert("TypedArrayGetSymbolSpecies" in index));
test("TypedArrayLength", () => assert("TypedArrayLength" in index));
test("TypedArrayName", () => assert("TypedArrayName" in index));
test("TypedArrayOf", () => assert("TypedArrayOf" in index));
test("TypedArrayOfApply", () => assert("TypedArrayOfApply" in index));
test("TypedArrayPrototype", () => assert("TypedArrayPrototype" in index));
test("TypedArrayPrototypeAt", () => assert("TypedArrayPrototypeAt" in index));
test("TypedArrayPrototypeConstructor", () => assert("TypedArrayPrototypeConstructor" in index));
test("TypedArrayPrototypeCopyWithin", () => assert("TypedArrayPrototypeCopyWithin" in index));
test("TypedArrayPrototypeEntries", () => assert("TypedArrayPrototypeEntries" in index));
test("TypedArrayPrototypeEvery", () => assert("TypedArrayPrototypeEvery" in index));
test("TypedArrayPrototypeFill", () => assert("TypedArrayPrototypeFill" in index));
test("TypedArrayPrototypeFilter", () => assert("TypedArrayPrototypeFilter" in index));
test("TypedArrayPrototypeFind", () => assert("TypedArrayPrototypeFind" in index));
test("TypedArrayPrototypeFindIndex", () => assert("TypedArrayPrototypeFindIndex" in index));
test("TypedArrayPrototypeFindLast", () => assert("TypedArrayPrototypeFindLast" in index));
test("TypedArrayPrototypeFindLastIndex", () => assert("TypedArrayPrototypeFindLastIndex" in index));
test("TypedArrayPrototypeForEach", () => assert("TypedArrayPrototypeForEach" in index));
test("TypedArrayPrototypeGetBuffer", () => assert("TypedArrayPrototypeGetBuffer" in index));
test("TypedArrayPrototypeGetByteLength", () => assert("TypedArrayPrototypeGetByteLength" in index));
test("TypedArrayPrototypeGetByteOffset", () => assert("TypedArrayPrototypeGetByteOffset" in index));
test("TypedArrayPrototypeGetLength", () => assert("TypedArrayPrototypeGetLength" in index));
test("TypedArrayPrototypeGetSymbolToStringTag", () => assert("TypedArrayPrototypeGetSymbolToStringTag" in index));
test("TypedArrayPrototypeIncludes", () => assert("TypedArrayPrototypeIncludes" in index));
test("TypedArrayPrototypeIndexOf", () => assert("TypedArrayPrototypeIndexOf" in index));
test("TypedArrayPrototypeJoin", () => assert("TypedArrayPrototypeJoin" in index));
test("TypedArrayPrototypeKeys", () => assert("TypedArrayPrototypeKeys" in index));
test("TypedArrayPrototypeLastIndexOf", () => assert("TypedArrayPrototypeLastIndexOf" in index));
test("TypedArrayPrototypeMap", () => assert("TypedArrayPrototypeMap" in index));
test("TypedArrayPrototypeReduce", () => assert("TypedArrayPrototypeReduce" in index));
test("TypedArrayPrototypeReduceRight", () => assert("TypedArrayPrototypeReduceRight" in index));
test("TypedArrayPrototypeReverse", () => assert("TypedArrayPrototypeReverse" in index));
test("TypedArrayPrototypeSet", () => assert("TypedArrayPrototypeSet" in index));
test("TypedArrayPrototypeSlice", () => assert("TypedArrayPrototypeSlice" in index));
test("TypedArrayPrototypeSome", () => assert("TypedArrayPrototypeSome" in index));
test("TypedArrayPrototypeSort", () => assert("TypedArrayPrototypeSort" in index));
test("TypedArrayPrototypeSubarray", () => assert("TypedArrayPrototypeSubarray" in index));
test("TypedArrayPrototypeSymbolIterator", () => assert("TypedArrayPrototypeSymbolIterator" in index));
test("TypedArrayPrototypeToLocaleString", () => assert("TypedArrayPrototypeToLocaleString" in index));
test("TypedArrayPrototypeToString", () => assert("TypedArrayPrototypeToString" in index));
test("TypedArrayPrototypeValues", () => assert("TypedArrayPrototypeValues" in index));
test("URIError", () => assert("URIError" in index));
test("URIErrorLength", () => assert("URIErrorLength" in index));
test("URIErrorName", () => assert("URIErrorName" in index));
test("URIErrorPrototype", () => assert("URIErrorPrototype" in index));
test("URIErrorPrototypeConstructor", () => assert("URIErrorPrototypeConstructor" in index));
test("URIErrorPrototypeMessage", () => assert("URIErrorPrototypeMessage" in index));
test("URIErrorPrototypeName", () => assert("URIErrorPrototypeName" in index));
test("Uint16Array", () => assert("Uint16Array" in index));
test("Uint16ArrayBYTES_PER_ELEMENT", () => assert("Uint16ArrayBYTES_PER_ELEMENT" in index));
test("Uint16ArrayLength", () => assert("Uint16ArrayLength" in index));
test("Uint16ArrayName", () => assert("Uint16ArrayName" in index));
test("Uint16ArrayPrototype", () => assert("Uint16ArrayPrototype" in index));
test("Uint16ArrayPrototypeBYTES_PER_ELEMENT", () => assert("Uint16ArrayPrototypeBYTES_PER_ELEMENT" in index));
test("Uint16ArrayPrototypeConstructor", () => assert("Uint16ArrayPrototypeConstructor" in index));
test("Uint32Array", () => assert("Uint32Array" in index));
test("Uint32ArrayBYTES_PER_ELEMENT", () => assert("Uint32ArrayBYTES_PER_ELEMENT" in index));
test("Uint32ArrayLength", () => assert("Uint32ArrayLength" in index));
test("Uint32ArrayName", () => assert("Uint32ArrayName" in index));
test("Uint32ArrayPrototype", () => assert("Uint32ArrayPrototype" in index));
test("Uint32ArrayPrototypeBYTES_PER_ELEMENT", () => assert("Uint32ArrayPrototypeBYTES_PER_ELEMENT" in index));
test("Uint32ArrayPrototypeConstructor", () => assert("Uint32ArrayPrototypeConstructor" in index));
test("Uint8Array", () => assert("Uint8Array" in index));
test("Uint8ArrayBYTES_PER_ELEMENT", () => assert("Uint8ArrayBYTES_PER_ELEMENT" in index));
test("Uint8ArrayLength", () => assert("Uint8ArrayLength" in index));
test("Uint8ArrayName", () => assert("Uint8ArrayName" in index));
test("Uint8ArrayPrototype", () => assert("Uint8ArrayPrototype" in index));
test("Uint8ArrayPrototypeBYTES_PER_ELEMENT", () => assert("Uint8ArrayPrototypeBYTES_PER_ELEMENT" in index));
test("Uint8ArrayPrototypeConstructor", () => assert("Uint8ArrayPrototypeConstructor" in index));
test("Uint8ClampedArray", () => assert("Uint8ClampedArray" in index));
test("Uint8ClampedArrayBYTES_PER_ELEMENT", () => assert("Uint8ClampedArrayBYTES_PER_ELEMENT" in index));
test("Uint8ClampedArrayLength", () => assert("Uint8ClampedArrayLength" in index));
test("Uint8ClampedArrayName", () => assert("Uint8ClampedArrayName" in index));
test("Uint8ClampedArrayPrototype", () => assert("Uint8ClampedArrayPrototype" in index));
test("Uint8ClampedArrayPrototypeBYTES_PER_ELEMENT", () => assert("Uint8ClampedArrayPrototypeBYTES_PER_ELEMENT" in index));
test("Uint8ClampedArrayPrototypeConstructor", () => assert("Uint8ClampedArrayPrototypeConstructor" in index));
test("WeakMap", () => assert("WeakMap" in index));
test("WeakMapLength", () => assert("WeakMapLength" in index));
test("WeakMapName", () => assert("WeakMapName" in index));
test("WeakMapPrototype", () => assert("WeakMapPrototype" in index));
test("WeakMapPrototypeConstructor", () => assert("WeakMapPrototypeConstructor" in index));
test("WeakMapPrototypeDelete", () => assert("WeakMapPrototypeDelete" in index));
test("WeakMapPrototypeGet", () => assert("WeakMapPrototypeGet" in index));
test("WeakMapPrototypeHas", () => assert("WeakMapPrototypeHas" in index));
test("WeakMapPrototypeSet", () => assert("WeakMapPrototypeSet" in index));
test("WeakMapPrototypeSymbolToStringTag", () => assert("WeakMapPrototypeSymbolToStringTag" in index));
test("WeakRef", () => assert("WeakRef" in index));
test("WeakRefLength", () => assert("WeakRefLength" in index));
test("WeakRefName", () => assert("WeakRefName" in index));
test("WeakRefPrototype", () => assert("WeakRefPrototype" in index));
test("WeakRefPrototypeConstructor", () => assert("WeakRefPrototypeConstructor" in index));
test("WeakRefPrototypeDeref", () => assert("WeakRefPrototypeDeref" in index));
test("WeakRefPrototypeSymbolToStringTag", () => assert("WeakRefPrototypeSymbolToStringTag" in index));
test("WeakSet", () => assert("WeakSet" in index));
test("WeakSetLength", () => assert("WeakSetLength" in index));
test("WeakSetName", () => assert("WeakSetName" in index));
test("WeakSetPrototype", () => assert("WeakSetPrototype" in index));
test("WeakSetPrototypeAdd", () => assert("WeakSetPrototypeAdd" in index));
test("WeakSetPrototypeConstructor", () => assert("WeakSetPrototypeConstructor" in index));
test("WeakSetPrototypeDelete", () => assert("WeakSetPrototypeDelete" in index));
test("WeakSetPrototypeHas", () => assert("WeakSetPrototypeHas" in index));
test("WeakSetPrototypeSymbolToStringTag", () => assert("WeakSetPrototypeSymbolToStringTag" in index));
test("applyBind", () => assert("applyBind" in index));
test("decodeURI", () => assert("decodeURI" in index));
test("decodeURIComponent", () => assert("decodeURIComponent" in index));
test("encodeURI", () => assert("encodeURI" in index));
test("encodeURIComponent", () => assert("encodeURIComponent" in index));
test("escape", () => assert("escape" in index));
test("eval", () => assert("eval" in index));
test("globalThis", () => assert("globalThis" in index));
test("hardenRegExp", () => assert("hardenRegExp" in index));
test("makeSafe", () => assert("makeSafe" in index));
test("uncurryThis", () => assert("uncurryThis" in index));
test("unescape", () => assert("unescape" in index));
}
